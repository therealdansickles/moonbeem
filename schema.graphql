# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type FactoryConfigData {
  name: String!
  value: String!
  type: String!
  comment: String!
  chainId: Int!
}

type FactoryConfigRspDto {
  data: [FactoryConfigData!]!
  total: Int!
}

type VIPriceType {
  price: String!
  token: EthereumAddress!
}

type VUserWalletInfo {
  id: ID!
  address: EthereumAddress!
  name: String!
  avatar: String
  customUrl: String!
  description: String!
  discordLink: String!
  facebookLink: String!
  twitterLink: String!
  followerCount: Int!
  followingCount: Int!
  isFollow: Boolean
  holding: Int
  fansCount: Int
  estimatedValues: [VIPriceType!]
}

type VLoginRspDto {
  sessionToken: String!
  item: VUserWalletInfo!
}

type VFollowingInfo {
  name: String!
  address: EthereumAddress!
  avatar: String!
  followingCount: Float!
  followerCount: Float!
  isFollowed: Boolean
}

type VUserFollowingListRspDto {
  data: [VFollowingInfo!]!
  total: Float!
}

type VUserFollowerListRspDto {
  data: [VFollowingInfo!]!
  total: Float!
}

type BasicPriceInfo {
  price: String!
  token: EthereumAddress!
  chainId: Int!
}

type BasicFloorPriceInfo {
  price: String!
  token: EthereumAddress!
  chainId: Int!
}

type BasicAttributeInfo {
  value: String!
  traitType: String!
  displayType: String
}

type BasicCollectionInfo {
  name: String!
  description: String!
  avatar: String!
  background: String!
  address: EthereumAddress!
  type: String!
  chainId: Int!
  orgId: ID!
  creator: EthereumAddress!
  paymentToken: EthereumAddress!
  totalSupply: Int!
  beginTime: Int!
  endTime: Int!
}

type BasicTierInfo {
  collection: EthereumAddress!
  name: String!
  description: String!
  avatar: String!
  id: Int!
  startId: Int!
  endId: Int!
  currentId: Int!
  price: BasicPriceInfo!
  attributes: [BasicAttributeInfo!]!
}

type BasicCollectionRoyaltyInfo {
  address: EthereumAddress!
  rate: Int!
}

type BasicWalletInfo {
  address: EthereumAddress!
  name: String!
  description: String!
  avatar: String!
  discord: String!
  facebook: String!
  twitter: String!
  customUrl: String!
}

type LandingPageCollectionData {
  creator: BasicWalletInfo!
  collection: BasicCollectionInfo!
  royalty: BasicCollectionRoyaltyInfo!
  floorPrice: BasicFloorPriceInfo!
  tiers: [BasicTierInfo!]!
  attributeOverview: JSONObject!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type LandingPageCollectionRspDto {
  data: [LandingPageCollectionData!]!
  total: Int!
}

type LandingPageRankingOfCreatorData {
  user: BasicWalletInfo!
  volume: BasicPriceInfo!
}

type LandingPageRankingOfCreatorsRspDto {
  data: [LandingPageRankingOfCreatorData!]!
  total: Int!
}

type LandingPageRankingOfItemData {
  tier: BasicTierInfo!
  collection: BasicCollectionInfo!
}

type LandingPageRankingOfItemsRspDto {
  data: [LandingPageRankingOfItemData!]!
  total: Int!
}

type VICollectionType {
  address: EthereumAddress!
  name: String!
  avatar: String!
  description: String!
  background: String!
  type: String!
}

type VITierAttr {
  extra: String!
  traitType: String!
  value: String!
}

type VSecondaryMarketView {
  onSale: Boolean!
  onSalePrice: String!
  maxSalePrice: String!
  latestSalePrice: String!
}

type VCoin {
  id: String!
  chainId: Float!
  contract: String!
  name: String!
  symbol: String!
  decimals: Float!
  derivedETH: String!
  derivedUSDC: String!
  native: Boolean!
}

type NftInfo {
  collection: VICollectionType!
  token: EthereumAddress!
  tokenId: String!
  name: String!
  avatar: String!
  description: String!
  quantity: Int!
  owner: EthereumAddress!
  tierId: Int!
  attributes: [VITierAttr!]!
  currentPrice: String!
  secondary: VSecondaryMarketView!
  extensions: [String!]
  priceInfo: VCoin!
}

type VAddressHoldingRspDto {
  data: [NftInfo!]!
  total: Int!
}

type VActivityInfo {
  token: EthereumAddress!
  tokenId: String!
  status: String!
  collection: VICollectionType!
  owner: EthereumAddress!
  recipient: EthereumAddress!
  name: String!
  avatar: String!
  description: String!
  secondary: VSecondaryMarketView!
  attributes: [VITierAttr!]!
  currentPrice: String!
  extensions: [String!]
}

type VActivityRspDto {
  data: [VActivityInfo!]!
  total: Int!
}

type ReleasedInfo {
  collection: VICollectionType!
  token: EthereumAddress!
  name: String!
  avatar: String!
  description: String!
  quantity: Int!
  owner: EthereumAddress!
  tierId: Int!
  attributes: [VITierAttr!]!
  currentPrice: String!
  secondary: VSecondaryMarketView!
  extensions: [String!]
  priceInfo: VCoin!
}

type VAddressReleasedRspDto {
  data: [ReleasedInfo!]!
  total: Int!
}

type VCollectionActivityInfo {
  token: EthereumAddress!
  tokenId: String!
  txTime: Int!
  status: String!
  collection: VICollectionType!
  owner: EthereumAddress!
  recipient: EthereumAddress!
  name: String!
  avatar: String!
  description: String!
  secondary: VSecondaryMarketView!
  attributes: [VITierAttr!]!
  currentPrice: String!
  extensions: [String!]
}

type VCollectionActivityRspDto {
  data: [VCollectionActivityInfo!]!
  total: Int!
}

type VSearchCollectionItem {
  name: String!
  image: String!
  collection: EthereumAddress!
  itemsCount: Float!
}

type VSearchAccountItem {
  name: String!
  avatar: String!
  address: EthereumAddress!
}

"""Ethereum Address custom scalar type"""
scalar EthereumAddress

type Query {
  getHealth: String!
  getTxStatus(chain: String!, txHash: String!): Boolean!
  getFactoryConfig(chainId: String = ""): FactoryConfigRspDto!
  getAddressInfo(address: EthereumAddress!): VUserWalletInfo!
  getUserFollowingList(address: EthereumAddress!, skip: Int = 0, take: Int = 10): VUserFollowingListRspDto!
  getUserFollowerList(address: EthereumAddress!, skip: Int = 0, take: Int = 10): VUserFollowerListRspDto!
  getAddressHoldings(address: EthereumAddress!, skip: Int = 0, take: Int = 10): VAddressHoldingRspDto!
  getAddressActivities(address: EthereumAddress!, skip: Int = 0, take: Int = 10): VActivityRspDto!
  getAddressReleased(address: EthereumAddress!, skip: Int = 0, take: Int = 10): VAddressReleasedRspDto!
  getCollectionActivities(address: EthereumAddress!, skip: Int = 0, take: Int = 10): VCollectionActivityRspDto!
  getLandingPageCollections(skip: Int = 0, take: Int = 10, status: BasicCollectionStatus, type: BasicCollectionType): LandingPageCollectionRspDto!
  getRankingOfCreators(skip: Int = 0, take: Int = 10, startTime: Int = 0, endTime: Int = 0): LandingPageRankingOfCreatorsRspDto!
  getRankingOfItems(skip: Int = 0, take: Int = 10): LandingPageRankingOfItemsRspDto!
}

enum BasicCollectionStatus {
  Upcoming
  Live
  Expired
}

enum BasicCollectionType {
  Tiered
  Edition
  Custom
}

type Mutation {
  loginWithWallet(address: EthereumAddress!, message: String!, signature: String!): VLoginRspDto!
  logoutWallet: Boolean!
  followUserWallet(address: EthereumAddress!, isFollowed: Boolean): Boolean!
  updateAddressInfo(name: String, avatar: String, customUrl: String, description: String, discordLink: String, facebookLink: String, twitterLink: String): Boolean!
}