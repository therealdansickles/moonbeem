# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type FactoryConfigData {
  name: String!
  value: String!
  type: String!
  comment: String!
  chainId: Int!
}

type FactoryConfigRspDto {
  data: [FactoryConfigData!]!
  total: Int!
}

type User {
  id: ID!
  username: String
  name: String
  email: String!
  password: String
  avatarUrl: String
}

type Wallet {
  """The id for a wallet."""
  id: ID!

  """The address for a wallet."""
  address: String!

  """The owner of the wallet."""
  owner: User
}

type VIPriceType {
  price: String!
  token: EthereumAddress!
}

type VUserWalletInfo {
  id: ID!
  address: EthereumAddress!
  name: String!
  avatar: String
  customUrl: String!
  description: String!
  discordLink: String!
  facebookLink: String!
  twitterLink: String!
  followerCount: Int!
  followingCount: Int!
  isFollow: Boolean
  holding: Int
  fansCount: Int
  estimatedValues: [VIPriceType!]
}

type LoginWithWalletResponse {
  sessionToken: String!
  item: Wallet!
}

type LoginWithEmailResponse {
  sessionToken: String!
  user: User!
}

type VFollowingInfo {
  name: String!
  address: EthereumAddress!
  avatar: String!
  followingCount: Float!
  followerCount: Float!
  isFollowed: Boolean
}

type VUserFollowingListRspDto {
  data: [VFollowingInfo!]!
  total: Float!
}

type VUserFollowerListRspDto {
  data: [VFollowingInfo!]!
  total: Float!
}

type Collection {
  """The ID for a collection"""
  id: String!

  """The unique URL-friendly identifier for a collection."""
  name: String!

  """The name that we display for the collection."""
  displayName: String!

  """The type of collection this is."""
  kind: CollectionKind!

  """The description for the collection."""
  about: String

  """
  The address of the collection, e.g. '0x6bf9ec331e083627b0f48332ece2d99a7eb7fb0c'
  """
  address: String

  """
  The image url for the avatar of the collection. This is the profile picture.
  """
  avatarUrl: String

  """The image url for the background of the collection."""
  backgroundUrl: String

  """The url for the website associated with this collection"""
  websiteUrl: String

  """The twitter handle associated with this collection, e.g. 'vibe-labs'"""
  twitter: String

  """The instagram handle associated with this collection, e.g. 'vibe-labs'"""
  instagram: String

  """The discord handle associated with this collection, e.g. 'vibe-labs"""
  discord: String

  """The tags associated with this organization."""
  tags: [String!]

  """The DateTime that this collection was published."""
  publishedAt: DateTime

  """
  The DateTime that this collection was created(initially created as a draft).
  """
  createdAt: DateTime!

  """The DateTime that this collection was last updated."""
  updatedAt: DateTime!

  """The wallet that created the collection."""
  creatorId: String
}

enum CollectionKind {
  edition
  tiered
  bulk
  other
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Collaboration {
  """The ID of the collaboration."""
  id: String!

  """The wallet of the collaboration."""
  wallet: Wallet!

  """The collection of the collaboration."""
  collection: Collection!

  """The address of the collaboration contract."""
  address: String

  """The address of the collaboration factory."""
  factoryAddress: String

  """The royalty rate of the collaboration."""
  royaltyRate: Float!

  """The created datetime of the collaboration."""
  createdAt: DateTime!

  """The updated datetime of the collaboration."""
  updatedAt: DateTime!
}

type Tier {
  """The id of the tier."""
  id: String!

  """The total number of mints for this tier."""
  totalMints: Float!

  """The name of the tier."""
  name: String!

  """The description of the tier."""
  description: String!

  """This is the URL to the image of the tier."""
  image: String!

  """
  This is the URL that will appear with the asset's image and allow users to leave the marketplace and view the tier on your site.
  """
  externalUrl: String!

  """This is the URL to the animation of the tier."""
  animationUrl: String!

  """A JSON object containing the attributes of the tier."""
  attributes: String!
}

type Organization {
  id: ID!

  """The owner of the organization."""
  owner: User!

  """The unique URL-friendly identifier for a organization."""
  name: String!

  """The name that we display for the organization."""
  displayName: String!

  """The type of organization this is. e.g 'personal', 'general'."""
  kind: Float!

  """The description for the organization."""
  about: String

  """
  The image url for the avatar of the organization. This is the profile picture.
  """
  avatarUrl: String!

  """The image url for the background of the organization."""
  backgroundUrl: String

  """The url for the website associated with this organization"""
  websiteUrl: String

  """The twitter handle associated with this organization, e.g. 'vibe-labs'"""
  twitter: String

  """
  The instagram handle associated with this organization, e.g. 'vibe-labs'
  """
  instagram: String

  """The discord handle associated with this organization, e.g. 'vibe-labs"""
  discord: String

  """
  The DateTime that this organization was created(initially created as a draft).
  """
  createdAt: DateTime!

  """The DateTime that this organization was last updated."""
  updatedAt: DateTime!
}

type Membership {
  """The id of the membership."""
  id: String!

  """The user invited to this membership"""
  user: User!

  """The organization that this membership is for"""
  organization: Organization!

  """Whether or not this user can edit."""
  canEdit: Boolean!

  """Whether or not this user can manage."""
  canManage: Boolean!

  """Whether or not this user can deploy a collection."""
  canDeploy: Boolean!
}

type BasicPriceInfo {
  price: String!
  token: EthereumAddress!
  chainId: Int!
}

type BasicFloorPriceInfo {
  price: String!
  token: EthereumAddress!
  chainId: Int!
}

type BasicAttributeInfo {
  value: String!
  traitType: String!
  displayType: String
}

type BasicCollectionInfo {
  name: String!
  description: String!
  avatar: String!
  background: String!
  address: EthereumAddress!
  type: String!
  chainId: Int!
  orgId: ID!
  creator: EthereumAddress!
  paymentToken: EthereumAddress!
  totalSupply: Int!
  beginTime: Int!
  endTime: Int!
}

type BasicTierInfo {
  collection: EthereumAddress!
  name: String!
  description: String!
  avatar: String!
  id: Int!
  startId: Int!
  endId: Int!
  currentId: Int!
  price: BasicPriceInfo!
  attributes: [BasicAttributeInfo!]!
}

type BasicCollectionRoyaltyInfo {
  address: EthereumAddress!
  rate: Int!
}

type BasicWalletInfo {
  address: EthereumAddress!
  name: String!
  description: String!
  avatar: String!
  discord: String!
  facebook: String!
  twitter: String!
  customUrl: String!
}

type BasicErc721Info {
  token: EthereumAddress!
  tokenId: String!
  owner: EthereumAddress!
}

type LandingPageCollectionData {
  creator: BasicWalletInfo!
  collection: BasicCollectionInfo!
  royalty: BasicCollectionRoyaltyInfo!
  floorPrice: BasicFloorPriceInfo!
  tiers: [BasicTierInfo!]!
  attributeOverview: JSONObject!
  chainId: Int
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type LandingPageCollectionRspDto {
  data: [LandingPageCollectionData!]!
  total: Int!
}

type LandingPageRankingOfCreatorData {
  user: BasicWalletInfo!
  volume: BasicPriceInfo!
}

type LandingPageRankingOfCreatorsRspDto {
  data: [LandingPageRankingOfCreatorData!]!
  total: Int!
}

type LandingPageRankingOfItemData {
  tier: BasicTierInfo!
  collection: BasicCollectionInfo!
}

type LandingPageRankingOfItemsRspDto {
  data: [LandingPageRankingOfItemData!]!
  total: Int!
}

type VICollectionType {
  address: EthereumAddress!
  name: String!
  avatar: String!
  description: String!
  background: String!
  type: String!
}

type VITierAttr {
  extra: String!
  traitType: String!
  value: String!
}

type VSecondaryMarketView {
  onSale: Boolean!
  onSalePrice: String!
  maxSalePrice: String!
  latestSalePrice: String!
}

type VCoin {
  id: String!
  chainId: Float!
  contract: String!
  name: String!
  symbol: String!
  decimals: Float!
  derivedETH: String!
  derivedUSDC: String!
  native: Boolean!
}

type NftInfo {
  collection: VICollectionType!
  token: EthereumAddress!
  tokenId: String!
  name: String!
  avatar: String!
  description: String!
  quantity: Int!
  owner: EthereumAddress!
  tierId: Int!
  attributes: [VITierAttr!]!
  currentPrice: String!
  secondary: VSecondaryMarketView!
  extensions: [String!]
  priceInfo: VCoin!
}

type VAddressHoldingRspDto {
  data: [NftInfo!]!
  total: Int!
}

type MarketAddressActivityData {
  collection: BasicCollectionInfo!
  nft: BasicErc721Info!
  tier: BasicTierInfo!
  secondary: VSecondaryMarketView!
  currentPrice: BasicPriceInfo!
  recipient: EthereumAddress!
  status: String!
  extensions: [String!]
}

type MarketAddressActivitiesRspDto {
  data: [MarketAddressActivityData!]!
  total: Int!
}

type MarketAddressReleasedData {
  collection: BasicCollectionInfo!
  tier: BasicTierInfo!
  quantity: Int!
  currentPrice: BasicPriceInfo!
  secondary: VSecondaryMarketView!
  extensions: [String!]
}

type MarketAddressReleasedRspDto {
  data: [MarketAddressReleasedData!]!
  total: Int!
}

type VCollectionActivityInfo {
  token: EthereumAddress!
  tokenId: String!
  txTime: Int!
  status: String!
  collection: VICollectionType!
  owner: EthereumAddress!
  recipient: EthereumAddress!
  name: String!
  avatar: String!
  description: String!
  secondary: VSecondaryMarketView!
  attributes: [VITierAttr!]!
  currentPrice: String!
  extensions: [String!]
}

type VCollectionActivityRspDto {
  data: [VCollectionActivityInfo!]!
  total: Int!
}

type CollectionSearchResult {
  """The collection name"""
  name: String!

  """
  The image url for the avatar of the collection. This is the profile picture.
  """
  image: String

  """
  The address of the collection, e.g. '0x6bf9ec331e083627b0f48332ece2d99a7eb7fb0c'
  """
  address: EthereumAddress!

  """The chainId of the collection."""
  chainId: Int!

  """The total number of items in this collection"""
  itemsCount: Float!
}

type CollectionSearchResults {
  """An array of collections that fits the search query"""
  data: [CollectionSearchResult!]!

  """A boolean indicating wether this is the last page of the pagination"""
  isLastPage: Boolean!

  """The total number of items that fits the search query"""
  total: Float!
}

type UserSearchResult {
  """The user's name"""
  name: String!

  """The user's avatar"""
  avatar: String

  """The user's wallet address"""
  address: EthereumAddress!
}

type UserSearchResults {
  """An array of users that fits the search query"""
  data: [UserSearchResult!]!

  """A boolean indicating wether this is the last page of the pagination"""
  isLastPage: Boolean!

  """The total number of items that fits the search query"""
  total: Float!
}

type GlobalSearchResult {
  """The data object of the collections that fit the search query"""
  collections: CollectionSearchResults!

  """The data object of the users that fit the search query"""
  users: UserSearchResults!
}

type Waitlist {
  id: ID!
  email: String!

  """The address for a wallet."""
  address: String!
  seatNumber: Float!
  twitter: String!
}

"""Ethereum Address custom scalar type"""
scalar EthereumAddress

type Query {
  getHealth: String!
  getTxStatus(chain: String!, txHash: String!): Boolean!
  getFactoryConfig(chainId: Int = 0): FactoryConfigRspDto!

  """Retrieves a wallet by its ethereum or EIP-3770 address."""
  wallet(
    """an ethereum or EIP-3770 address."""
    address: String!
  ): Wallet

  """Retrieve a membership by id."""
  membership(id: String!): Membership

  """Returns an organization for the given uuid"""
  organization(id: String!): Organization

  """returns a collaboration for a given uuid"""
  collaboration(id: String!): Collaboration

  """returns a collection for a given uuid"""
  collection(id: String!): Collection

  """Get a specific tier by id."""
  tier(id: String!): Tier
  getAddressInfo(address: EthereumAddress!): VUserWalletInfo!
  getUserFollowingList(address: EthereumAddress!, skip: Int = 0, take: Int = 10): VUserFollowingListRspDto!
  getUserFollowerList(address: EthereumAddress!, skip: Int = 0, take: Int = 10): VUserFollowerListRspDto!
  getLandingPageCollections(skip: Int = 0, take: Int = 10, status: BasicCollectionStatus, type: BasicCollectionType, chainId: Int = 0): LandingPageCollectionRspDto!
  getRankingOfCreators(skip: Int = 0, take: Int = 10, startTime: Int = 0, endTime: Int = 0, chainId: Int = 0): LandingPageRankingOfCreatorsRspDto!
  getRankingOfItems(skip: Int = 0, take: Int = 10, chainId: Int = 0): LandingPageRankingOfItemsRspDto!
  getAddressHoldings(address: EthereumAddress!, skip: Int = 0, take: Int = 10): VAddressHoldingRspDto!
  getAddressActivities(skip: Int = 0, take: Int = 10, address: EthereumAddress!, chainId: Int = 0): MarketAddressActivitiesRspDto!
  getAddressReleased(skip: Int = 0, take: Int = 10, address: EthereumAddress!, chainId: Int = 0): MarketAddressReleasedRspDto!
  getCollectionActivities(address: EthereumAddress!, skip: Int = 0, take: Int = 10): VCollectionActivityRspDto!
  globalSearch(input: GloablSearchInput!): GlobalSearchResult!
  globalSearchV1(input: GloablSearchInput!): GlobalSearchResult!

  """returns a waitlist for a given email"""
  getWaitlist(email: String!): Waitlist
}

enum BasicCollectionStatus {
  Upcoming
  Live
  Expired
}

enum BasicCollectionType {
  Tiered
  Edition
  Custom
}

input GloablSearchInput {
  searchTerm: String!
  page: Float!
  pageSize: Float!
}

type Mutation {
  loginWithWallet(input: LoginWithWalletInput!): LoginWithWalletResponse!
  loginWithEmail(input: LoginWithEmailInput!): LoginWithEmailResponse!
  logout(input: LogoutInput!): Boolean!
  createUserWithEmail(input: CreateUserWithEmailInput!): LoginWithEmailResponse!

  """update the given user."""
  updateUser(input: UpdateUserInput!): User!

  """creates a wallet"""
  createWallet(input: CreateWalletInput!): Wallet!

  """Binds a wallet to the current user."""
  bindWallet(input: BindWalletInput!): Wallet!

  """Unbinds a wallet from the current user."""
  unbindWallet(input: UnbindWalletInput!): Wallet!

  """Create a new membership."""
  createMembership(input: CreateMembershipInput!): Membership!

  """Accept a membership request."""
  acceptMembership(input: MembershipRequestInput!): Boolean!

  """Accept a membership request."""
  declineMembership(input: MembershipRequestInput!): Boolean!

  """Update a membership."""
  updateMembership(input: UpdateMembershipInput!): Membership!

  """Deletes a membership."""
  deleteMembership(input: DeleteMembershipInput!): Boolean!

  """Creates an organization."""
  createOrganization(input: CreateOrganizationInput!): Organization!

  """Update an organization."""
  updateOrganization(input: UpdateOrganizationInput!): Organization!

  """Delete an organization."""
  deleteOrganization(input: DeleteOrganizationInput!): Boolean!

  """Transfer an organization to another user."""
  transferOrganization(input: TransferOrganizationInput!): Organization!

  """create a collaboration"""
  createCollaboration(input: CreateCollaborationInput!): Collaboration!

  """creates a collection"""
  createCollection(input: CreateCollectionInput!): Collection!

  """updates a collection"""
  updateCollection(input: UpdateCollectionInput!): Boolean!

  """publishes a collection"""
  publishCollection(input: PublishCollectionInput!): Boolean!

  """delete a unpublished collection"""
  deleteCollection(input: DeleteCollectionInput!): Boolean!

  """Create a new tier."""
  createTier(input: CreateTierInput!): Tier!

  """Update a tier."""
  updateTier(input: UpdateTierInput!): Boolean!

  """Delete a tier."""
  deleteTier(input: DeleteTierInput!): Boolean!
  followUserWallet(address: EthereumAddress!, isFollowed: Boolean): Boolean!
  updateAddressInfo(name: String, avatar: String, customUrl: String, description: String, discordLink: String, facebookLink: String, twitterLink: String): Boolean!

  """creates a waitlist item"""
  createWaitlist(input: CreateWaitlistInput!): Waitlist!
}

input LoginWithWalletInput {
  address: EthereumAddress!
  message: String!
  signature: String!
}

input LoginWithEmailInput {
  email: String!
  password: String!
}

input LogoutInput {
  email: String
  address: EthereumAddress
}

input CreateUserWithEmailInput {
  email: String!
  password: String!
  username: String
  name: String
  avatarUrl: String
}

input UpdateUserInput {
  id: String!
  username: String
  name: String
  email: String
  password: String
  avatarUrl: String
}

input CreateWalletInput {
  """The address for a wallet."""
  address: String!

  """The id for the owner."""
  ownerId: String
}

input BindWalletInput {
  """an ethereum or EIP-3770 address."""
  address: String!

  """the owner uuid of the wallet."""
  owner: UserInput!
}

input UserInput {
  id: ID!
}

input UnbindWalletInput {
  """an ethereum or EIP-3770 address."""
  address: String!

  """the owner uuid of the wallet."""
  owner: UserInput!
}

input CreateMembershipInput {
  """The user that is a member of this organization."""
  userId: String!

  """The organization that this user is a member of."""
  organizationId: String!

  """Whether or not this user can edit."""
  canEdit: Boolean

  """Whether or not this user can manage."""
  canManage: Boolean

  """Whether or not this user can deploy a collection."""
  canDeploy: Boolean
}

input MembershipRequestInput {
  """The user that is a member of this organization."""
  userId: String!

  """The organization that this user is a member of."""
  organizationId: String!

  """The unique user invite code for the membership"""
  inviteCode: String!
}

input UpdateMembershipInput {
  """The id for a membership."""
  id: String!

  """Whether or not this user can edit."""
  canEdit: Boolean

  """Whether or not this user can manage."""
  canManage: Boolean

  """Whether or not this user can deploy a collection."""
  canDeploy: Boolean
}

input DeleteMembershipInput {
  """The id for a membership."""
  id: String!
}

input CreateOrganizationInput {
  """The unique URL-friendly identifier for a organization."""
  name: String!

  """The owner of the organization."""
  owner: UserInput!

  """The name that we display for the organization."""
  displayName: String

  """The description for the organization."""
  about: String

  """
  The image url for the avatar of the organization. This is the profile picture.
  """
  avatarUrl: String!

  """The image url for the background of the organization."""
  backgroundUrl: String

  """The url for the website associated with this organization"""
  websiteUrl: String

  """The twitter handle associated with this organization, e.g. 'vibe-labs'"""
  twitter: String

  """
  The instagram handle associated with this organization, e.g. 'vibe-labs'
  """
  instagram: String

  """The discord handle associated with this organization, e.g. 'vibe-labs"""
  discord: String
}

input UpdateOrganizationInput {
  """The id of the organization."""
  id: String!

  """The unique URL-friendly identifier for a organization."""
  name: String

  """The name that we display for the organization."""
  displayName: String

  """The description for the organization."""
  about: String

  """
  The image url for the avatar of the organization. This is the profile picture.
  """
  avatarUrl: String

  """The image url for the background of the organization."""
  backgroundUrl: String

  """The url for the website associated with this organization"""
  websiteUrl: String

  """The twitter handle associated with this organization, e.g. 'vibe-labs'"""
  twitter: String

  """
  The instagram handle associated with this organization, e.g. 'vibe-labs'
  """
  instagram: String

  """The discord handle associated with this organization, e.g. 'vibe-labs"""
  discord: String
}

input DeleteOrganizationInput {
  """The id of the organization."""
  id: String!
}

input TransferOrganizationInput {
  """The id of the organization."""
  id: String!

  """The new ownerId of the organization."""
  ownerId: String!
}

input CreateCollaborationInput {
  """The address of the collaboration contract."""
  address: String

  """The address of the collaboration factory."""
  factoryAddress: String

  """The wallet of the collaboration."""
  walletId: String!

  """The collection of the collaboration."""
  collectionId: String!

  """The royalty rate of the collaboration."""
  royaltyRate: Float!
}

input CreateCollectionInput {
  """The unique URL-friendly identifier for a collection."""
  name: String!

  """The name that we display for the collection."""
  displayName: String!

  """The type of collection this is."""
  kind: CollectionKind!

  """The description for the collection."""
  about: String

  """
  The image url for the avatar of the collection. This is the profile picture.
  """
  avatarUrl: String

  """The image url for the background of the collection."""
  backgroundUrl: String

  """The url for the website associated with this collection"""
  websiteUrl: String

  """The twitter handle associated with this collection, e.g. 'vibe-labs'"""
  twitter: String

  """The instagram handle associated with this collection, e.g. 'vibe-labs'"""
  instagram: String

  """The discord handle associated with this collection, e.g. 'vibe-labs"""
  discord: String

  """The tags associated with this organization."""
  tags: [String!]

  """
  The address of the collection, e.g. '0x6bf9ec331e083627b0f48332ece2d99a7eb7fb0c'
  """
  address: String

  """The chainId of the collection."""
  chainId: Int

  """The description for the collection."""
  creatorId: String
}

input UpdateCollectionInput {
  """The id for a collection."""
  id: String!

  """The unique URL-friendly identifier for a collection."""
  name: String

  """The name that we display for the collection."""
  displayName: String

  """
  The address of the collection, e.g. '0x6bf9ec331e083627b0f48332ece2d99a7eb7fb0c'
  """
  address: String

  """The chainId of the collection."""
  chainId: Int

  """The description for the collection."""
  about: String

  """
  The image url for the avatar of the collection. This is the profile picture.
  """
  avatarUrl: String

  """The image url for the background of the collection."""
  backgroundUrl: String

  """The url for the website associated with this collection"""
  websiteUrl: String

  """The twitter handle associated with this collection, e.g. 'vibe-labs'"""
  twitter: String

  """The instagram handle associated with this collection, e.g. 'vibe-labs'"""
  instagram: String

  """The discord handle associated with this collection, e.g. 'vibe-labs"""
  discord: String

  """The tags associated with this organization."""
  tags: [String!]
}

input PublishCollectionInput {
  """The id for a collection."""
  id: String!
}

input DeleteCollectionInput {
  """The id for a collection."""
  id: String!
}

input CreateTierInput {
  """The collection associated with this tier."""
  collectionId: String!

  """The total number of mints for this tier."""
  totalMints: Float!

  """The name of the tier."""
  name: String!

  """The description of the tier."""
  description: String

  """This is the URL to the image of the tier."""
  image: String

  """
  This is the URL that will appear with the asset's image and allow users to leave the marketplace and view the tier on your site.
  """
  externalUrl: String

  """This is the URL to the animation of the tier."""
  animationUrl: String

  """A JSON object containing the attributes of the tier."""
  attributes: String
}

input UpdateTierInput {
  """The id of the tier."""
  id: String!

  """The total number of mints for this tier."""
  totalMints: Float

  """The name of the tier."""
  name: String

  """The description of the tier."""
  description: String

  """This is the URL to the image of the tier."""
  image: String

  """
  This is the URL that will appear with the asset's image and allow users to leave the marketplace and view the tier on your site.
  """
  externalUrl: String

  """This is the URL to the animation of the tier."""
  animationUrl: String

  """A JSON object containing the attributes of the tier."""
  attributes: String
}

input DeleteTierInput {
  """The id for a tier."""
  id: String!
}

input CreateWaitlistInput {
  """The email of the user"""
  email: String!

  """The address for a wallet."""
  address: String!

  """The email of the user"""
  twitter: String
}