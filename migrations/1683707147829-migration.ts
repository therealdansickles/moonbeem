import { MigrationInterface, QueryRunner } from "typeorm";

export class Migration1683707147829 implements MigrationInterface {
    name = 'Migration1683707147829'

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`CREATE TABLE "Organization" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "name" character varying NOT NULL, "displayName" character varying NOT NULL, "kind" character varying NOT NULL DEFAULT 'general', "about" character varying, "avatarUrl" character varying, "backgroundUrl" character varying, "websiteUrl" character varying, "twitter" character varying, "instagram" character varying, "discord" character varying, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "ownerId" uuid, CONSTRAINT "UQ_fdea86baf6906a6792f2b60d6ff" UNIQUE ("name"), CONSTRAINT "PK_67bcafc78935cd441a054c6d4ea" PRIMARY KEY ("id")); COMMENT ON COLUMN "Organization"."name" IS 'The unique URL-friendly name of the organization.'; COMMENT ON COLUMN "Organization"."displayName" IS 'The displayed name for the organization.'; COMMENT ON COLUMN "Organization"."kind" IS 'The type of organization that this is. * \`personal\` - default organization with your account. * \`general\` - Bulk generation of NFTs.'; COMMENT ON COLUMN "Organization"."about" IS 'The description for the organization.'; COMMENT ON COLUMN "Organization"."avatarUrl" IS 'The URL pointing to the organization''s avatar.'; COMMENT ON COLUMN "Organization"."backgroundUrl" IS 'The URL pointing to the organization''s background.'; COMMENT ON COLUMN "Organization"."websiteUrl" IS 'The url of the organization''s website.'; COMMENT ON COLUMN "Organization"."twitter" IS 'The twitter handle for the organization.'; COMMENT ON COLUMN "Organization"."instagram" IS 'The instagram handle for the organization.'; COMMENT ON COLUMN "Organization"."discord" IS 'The discord handle for the organization.'`);
        await queryRunner.query(`CREATE TABLE "Membership" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "email" character varying, "inviteCode" character varying, "canEdit" boolean NOT NULL DEFAULT false, "canManage" boolean NOT NULL DEFAULT false, "canDeploy" boolean NOT NULL DEFAULT false, "acceptedAt" TIMESTAMP, "declinedAt" TIMESTAMP, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "userId" uuid, "organizationId" uuid, CONSTRAINT "PK_db6fe01b9c1f9f7b244a12b5092" PRIMARY KEY ("id")); COMMENT ON COLUMN "Membership"."email" IS 'The email of the invited user'; COMMENT ON COLUMN "Membership"."inviteCode" IS 'The invite code for the membership invite'; COMMENT ON COLUMN "Membership"."canEdit" IS 'Can edit draft collections.'; COMMENT ON COLUMN "Membership"."canManage" IS 'Can manage the organization members.'; COMMENT ON COLUMN "Membership"."canDeploy" IS 'Can deploy collections to the platform.'; COMMENT ON COLUMN "Membership"."acceptedAt" IS 'Date the user accepted the invite'; COMMENT ON COLUMN "Membership"."declinedAt" IS 'Date the user declined the invite'`);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_e731332668a9753a529d487d82" ON "Membership" ("email", "organizationId") `);
        await queryRunner.query(`CREATE UNIQUE INDEX "IDX_5f6357c928bfbb4bba2701e1c4" ON "Membership" ("userId", "organizationId") `);
        await queryRunner.query(`CREATE TABLE "User" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "username" character varying, "email" character varying NOT NULL, "password" character varying, "name" character varying, "avatarUrl" character varying, "about" character varying, "backgroundUrl" character varying, "websiteUrl" character varying, "twitter" character varying, "instagram" character varying, "discord" character varying, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "UQ_4a257d2c9837248d70640b3e36e" UNIQUE ("email"), CONSTRAINT "PK_9862f679340fb2388436a5ab3e4" PRIMARY KEY ("id")); COMMENT ON COLUMN "User"."username" IS 'The username of the user.'; COMMENT ON COLUMN "User"."email" IS 'The email of the user.'; COMMENT ON COLUMN "User"."password" IS 'The hashed password of the user.'; COMMENT ON COLUMN "User"."name" IS 'The name for the user.'; COMMENT ON COLUMN "User"."avatarUrl" IS 'The URL pointing to the user''s avatar.'; COMMENT ON COLUMN "User"."about" IS 'The description for the user.'; COMMENT ON COLUMN "User"."backgroundUrl" IS 'The URL pointing to the user''s background.'; COMMENT ON COLUMN "User"."websiteUrl" IS 'The url of the user''s website.'; COMMENT ON COLUMN "User"."twitter" IS 'The twitter handle for the user.'; COMMENT ON COLUMN "User"."instagram" IS 'The instagram handle for the user.'; COMMENT ON COLUMN "User"."discord" IS 'The discord handle for the user.'`);
        await queryRunner.query(`CREATE TABLE "Wallet" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "address" character varying(64) NOT NULL, "name" character varying, "avatarUrl" character varying, "about" character varying, "twitter" character varying, "instagram" character varying, "discord" character varying, "spotify" character varying, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "ownerId" uuid, CONSTRAINT "UQ_8c066b0fec1381ad121b866f70f" UNIQUE ("address"), CONSTRAINT "PK_8828fa4047435abf9287ff0e89e" PRIMARY KEY ("id")); COMMENT ON COLUMN "Wallet"."address" IS 'The Ethereum address'; COMMENT ON COLUMN "Wallet"."name" IS 'The name for the wallet.'; COMMENT ON COLUMN "Wallet"."avatarUrl" IS 'The URL pointing to the wallet''s avatar.'; COMMENT ON COLUMN "Wallet"."about" IS 'The description for the wallet.'; COMMENT ON COLUMN "Wallet"."twitter" IS 'The twitter handle for the wallet.'; COMMENT ON COLUMN "Wallet"."instagram" IS 'The instagram handle for the wallet.'; COMMENT ON COLUMN "Wallet"."discord" IS 'The discord handle for the wallet.'; COMMENT ON COLUMN "Wallet"."spotify" IS 'The spotify handle for the wallet.'`);
        await queryRunner.query(`CREATE TABLE "Tier" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "totalMints" integer NOT NULL DEFAULT '1', "price" character varying, "paymentTokenAddress" character varying, "tierId" integer NOT NULL DEFAULT '0', "image" character varying(500), "externalUrl" character varying(500), "name" character varying(64) NOT NULL, "description" character varying(500), "attributes" jsonb, "backgroundColor" character varying(6), "merkleRoot" character varying NOT NULL DEFAULT '', "animationUrl" character varying(500), "collectionId" uuid, CONSTRAINT "PK_e2b8e2992286bc22bce84c250f3" PRIMARY KEY ("id")); COMMENT ON COLUMN "Tier"."totalMints" IS 'The total number of NFTs in this tier.'; COMMENT ON COLUMN "Tier"."price" IS 'The price of NFTs in this tier.'; COMMENT ON COLUMN "Tier"."paymentTokenAddress" IS 'The contract address for the payment token associated with purchase of this tier.'; COMMENT ON COLUMN "Tier"."tierId" IS 'The tier id/index of the NFTs in this tier.'; COMMENT ON COLUMN "Tier"."image" IS 'This is the URL to the image of the item.'; COMMENT ON COLUMN "Tier"."externalUrl" IS 'This is the URL that will appear with the asset''s image and allow users to leave the marketplace and view the item on your site.'; COMMENT ON COLUMN "Tier"."name" IS 'The name of the tier/item.'; COMMENT ON COLUMN "Tier"."description" IS 'A human readable description of the item. Markdown is supported.'; COMMENT ON COLUMN "Tier"."attributes" IS 'A JSON object with arbitrary data. This can be used to store any additional information about the item.'; COMMENT ON COLUMN "Tier"."backgroundColor" IS 'Background color of the item. Must be a six-character hexadecimal without a pre-pended #.'; COMMENT ON COLUMN "Tier"."merkleRoot" IS 'If this is a whitelisted collection, then there will be merekleRoot here'; COMMENT ON COLUMN "Tier"."animationUrl" IS 'A URL to a multi-media attachment for the item.'`);
        await queryRunner.query(`CREATE TABLE "Collection" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "name" character varying(64) NOT NULL, "kind" "public"."Collection_kind_enum" NOT NULL DEFAULT 'other', "displayName" character varying(64), "address" character varying, "about" character varying, "avatarUrl" character varying, "backgroundUrl" character varying, "artists" text array NOT NULL DEFAULT '{}', "tags" text array NOT NULL DEFAULT '{}', "websiteUrl" character varying, "twitter" character varying, "instagram" character varying, "discord" character varying, "chainId" integer DEFAULT '1', "publishedAt" TIMESTAMP, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "organizationId" uuid, "creatorId" uuid, "collaborationId" uuid, CONSTRAINT "UQ_80d39901d41bba4930a634096b7" UNIQUE ("name"), CONSTRAINT "PK_727b1408b10c46d6233aa9f8dd8" PRIMARY KEY ("id")); COMMENT ON COLUMN "Collection"."name" IS 'The unique URL-friendly name of the collection.'; COMMENT ON COLUMN "Collection"."kind" IS 'The type of collection that this is.'; COMMENT ON COLUMN "Collection"."displayName" IS 'The displayed name for the collection.'; COMMENT ON COLUMN "Collection"."address" IS 'The collection address'; COMMENT ON COLUMN "Collection"."about" IS 'The description for the collection.'; COMMENT ON COLUMN "Collection"."avatarUrl" IS 'The URL pointing to the collection''s avatar.'; COMMENT ON COLUMN "Collection"."backgroundUrl" IS 'The URL pointing to the collection''s background.'; COMMENT ON COLUMN "Collection"."artists" IS 'This is going to change later as a stronger, association betwen our \`User\`. The list of artists attached to the collection.'; COMMENT ON COLUMN "Collection"."tags" IS 'The list of associated tags for the collection.'; COMMENT ON COLUMN "Collection"."websiteUrl" IS 'The url of the collection''s website.'; COMMENT ON COLUMN "Collection"."twitter" IS 'The twitter handle for the collection.'; COMMENT ON COLUMN "Collection"."instagram" IS 'The instagram handle for the collection'; COMMENT ON COLUMN "Collection"."discord" IS 'The discord handle for the collection.'; COMMENT ON COLUMN "Collection"."chainId" IS 'The chain id for the collection.'; COMMENT ON COLUMN "Collection"."publishedAt" IS 'The DateTime when the collection was launched.'`);
        await queryRunner.query(`CREATE TABLE "Collaboration" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "address" character varying(64), "royaltyRate" integer NOT NULL DEFAULT '100', "collaborators" jsonb NOT NULL DEFAULT '[]', "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), "organizationId" uuid, "userId" uuid, "walletId" uuid, CONSTRAINT "UQ_19423e45002fb1616eb9fc695ff" UNIQUE ("address"), CONSTRAINT "PK_232bcfc2c9b1479a26818985bda" PRIMARY KEY ("id")); COMMENT ON COLUMN "Collaboration"."address" IS 'The Ethereum address'; COMMENT ON COLUMN "Collaboration"."royaltyRate" IS 'The royalty rate in percentage.'; COMMENT ON COLUMN "Collaboration"."collaborators" IS 'All collaborators of this collaboration'`);
        await queryRunner.query(`CREATE TABLE "Waitlist" ("id" uuid NOT NULL DEFAULT uuid_generate_v4(), "email" character varying NOT NULL, "address" character varying(64) NOT NULL, "isClaimed" boolean NOT NULL DEFAULT false, "seatNumber" SERIAL NOT NULL, "twitter" character varying, "tweetedAt" character varying, "createdAt" TIMESTAMP NOT NULL DEFAULT now(), "updatedAt" TIMESTAMP NOT NULL DEFAULT now(), CONSTRAINT "UQ_9e44e0c714841db9b21fcccb458" UNIQUE ("email"), CONSTRAINT "UQ_66910211d1288c2ecf339c98e4c" UNIQUE ("address"), CONSTRAINT "PK_3715dd6b79ec38b3d76e8ff568e" PRIMARY KEY ("id")); COMMENT ON COLUMN "Waitlist"."email" IS 'The email of the user.'; COMMENT ON COLUMN "Waitlist"."address" IS 'The Ethereum address of the user wallet'; COMMENT ON COLUMN "Waitlist"."isClaimed" IS 'The user position in the waitinglist'; COMMENT ON COLUMN "Waitlist"."seatNumber" IS 'The user seat number in the waitinglist'; COMMENT ON COLUMN "Waitlist"."twitter" IS 'The twitter handle for the user.'; COMMENT ON COLUMN "Waitlist"."tweetedAt" IS 'The date the user was tweeted at'`);
        await queryRunner.query(`ALTER TABLE "Organization" ADD CONSTRAINT "FK_b8272f31f4a9e08052aed04387c" FOREIGN KEY ("ownerId") REFERENCES "User"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "Tier" ADD CONSTRAINT "FK_00eed820efee37b2e9aaa9a16d3" FOREIGN KEY ("collectionId") REFERENCES "Collection"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "Collection" ADD CONSTRAINT "FK_f7005c9db17623d4e3c02259ed3" FOREIGN KEY ("creatorId") REFERENCES "Wallet"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
        await queryRunner.query(`ALTER TABLE "Collection" ADD CONSTRAINT "FK_25c7c6dd60e9aefc4abd37774bc" FOREIGN KEY ("collaborationId") REFERENCES "Collaboration"("id") ON DELETE NO ACTION ON UPDATE NO ACTION`);
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.query(`ALTER TABLE "Collection" DROP CONSTRAINT "FK_25c7c6dd60e9aefc4abd37774bc"`);
        await queryRunner.query(`ALTER TABLE "Collection" DROP CONSTRAINT "FK_f7005c9db17623d4e3c02259ed3"`);
        await queryRunner.query(`ALTER TABLE "Tier" DROP CONSTRAINT "FK_00eed820efee37b2e9aaa9a16d3"`);
        await queryRunner.query(`ALTER TABLE "Organization" DROP CONSTRAINT "FK_b8272f31f4a9e08052aed04387c"`);
        await queryRunner.query(`DROP TABLE "Waitlist"`);
        await queryRunner.query(`DROP TABLE "Collaboration"`);
        await queryRunner.query(`DROP TABLE "Collection"`);
        await queryRunner.query(`DROP TABLE "Tier"`);
        await queryRunner.query(`DROP TABLE "Wallet"`);
        await queryRunner.query(`DROP TABLE "User"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_5f6357c928bfbb4bba2701e1c4"`);
        await queryRunner.query(`DROP INDEX "public"."IDX_e731332668a9753a529d487d82"`);
        await queryRunner.query(`DROP TABLE "Membership"`);
        await queryRunner.query(`DROP TABLE "Organization"`);
    }

}
