// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("V1_DATABASE_URL")
}

/// The Collection model is one of the core entity for the platform.
/// All NFTs created are made under a `collection`.
model Collection {
  id        String    @id @default(uuid()) @db.Uuid
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt

  /// The DateTime when the collection was launched.
  publishedAt DateTime?

  /// The wallet that created the collection, hence the `creator`.
  /// This is also the first wallet that receives royalties during
  /// the collaboration phase. This cannot be changed after creation.
  creator   Wallet? @relation(fields: [creatorId], references: id)
  creatorId String?  @db.Uuid

  /// The unique URL-friendly name of the collection.
  name String @unique @db.VarChar(64)

  /// The displayed name for the collection.
  displayName String @db.VarChar(64)

  /// The type of collection that this is. It can be:
  /// * `edition` - single NFT.
  /// * `tiered` - Multiple NFTs with different prices and attributes.
  /// * `bulk` - Bulk generation of NFTs.
  kind String @db.VarChar(20)

  /// The description for the collection.
  about String?

  /// The URL pointing to the collection's avatar.
  avatarUrl String?

  /// The URL pointing to the collection's background.
  backgroundUrl String?

  /// NOTE: This is going to change later as a stronger
  /// association betwen our `User`.
  /// The list of artists attached to the collection.
  artists String[]

  /// The list of associated tags for the collection.
  tags String[]

  /// The url of the collection's website.
  websiteUrl String?

  /// The twitter handle for the collection.
  twitter String?

  /// The instagram handle for the collection.
  instagram String?

  /// The discord handle for the collection.
  discord String?

  /// The address of the collection.
  address String?

  /// The chainId of the network the collection is on.
  chainId Int?

  /// The organization that owns the collection.
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?       @db.Uuid
  
  Collaboration Collaboration[]
  Contract       Contract[]
}

/// The Wallet model represents the addresses that interact with our collections and
/// are bounded to a user.
model Wallet {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  /// The Ethereum address
  address String @db.VarChar(64)

  /// The chainId of the network the wallet is on.
  chainId Int

  /// The name of the network the wallet is on.
  network String? @db.VarChar(20)

  /// The list of collections that the wallet has created.
  createdCollections Collection[]

  /// The entity that owns the wallet. This can be reset by
  /// binding / unbinding.
  /// NOTE:
  ///   * The default uuid(blackhole) is for all unbound wallets.
  ///   * the entity currently is a user. But this can change to an organization.
  ///   * that's why there isn't a set relation here
  ownerId       String?         @default("00000000-0000-0000-0000-000000000000") @db.Uuid
  Collaboration Collaboration[]

  /// This combination of address and chainId is what makes wallet's unique.
  @@unique([address, chainId])
  /// For binding / unbinding wallets to users.
  @@unique([address, chainId, ownerId])
}

/// The User model represents the users that interact with our platform.
model User {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  /// The wallet that is associated with the user.
  //wallets Wallet[]

  /// The email of the user.
  email String? @unique

  /// The username of the user.
  username String? @unique

  /// The hashed password of the user.
  password     String?

  /// The name of the user
  name String?

  /// The user's avatar
  avatar String?

  Organization Organization[]
  Membership   Membership[]
}

/// The Organization model represents the organizations that interact with our platform.
/// This is the main entity that controls the collections.
model Organization {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // user that created / owns the organization.
  owner   User   @relation(fields: [ownerId], references: id)
  ownerId String @db.Uuid

  /// The unique URL-friendly name of the organization.
  name String @unique @db.VarChar(64)

  /// The displayed name for the organization.
  displayName String @db.VarChar(64)

  /// The type of organization that this is. It can be:
  /// * `personal` - default organization with your account.
  /// * `general` - Bulk generation of NFTs.
  kind String @db.VarChar(20)

  /// The description for the organization.
  about String?

  /// The URL pointing to the organization's avatar.
  avatarUrl String?

  /// The URL pointing to the organization's background.
  backgroundUrl String?

  /// The url of the organization's website.
  websiteUrl String?

  /// The twitter handle for the organization.
  twitter String?

  /// The instagram handle for the organization.
  instagram String?

  /// The discord handle for the organization.
  discord String?

  /// The 'users' are apart of the organization.
  memberships Membership[]

  /// The organizations that the organization owns.
  collections Collection[]

  @@index([ownerId])
}

/// Membership is the association between an organization and a user.
/// We also store the simple permissions that the user has.
model Membership {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user   User   @relation(fields: [userId], references: id)
  userId String @db.Uuid

  organization   Organization @relation(fields: [organizationId], references: id)
  organizationId String       @db.Uuid

  /// Can edit draft collections.
  canEdit Boolean @default(false)

  /// Can manage the organization members.
  canManage Boolean @default(false)

  /// Can deploy collections to the platform.
  canDeploy Boolean @default(false)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

model Contract {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  collection   Collection @relation(fields: collectionId, references: [id])
  collectionId String     @db.Uuid

  address        String
  factoryAddress String
  symbol         String
  height         Int
  txHash         String
  txTime         Int?
}

// The Collaboration model
model Collaboration {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // The royalty rate of the collaboration.
  royaltyRate Int

  collection   Collection @relation(fields: [collectionId], references: id)
  collectionId String     @db.Uuid
  wallet       Wallet     @relation(fields: [walletId], references: id)
  walletId     String     @db.Uuid
}
